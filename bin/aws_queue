#!/usr/bin/env ruby

require 'trollop'
require 'aws-sdk'
require_relative '../lib/aws_pipes/version'

## USAGE ###########################################################################

opts = Trollop::options do
  version "aws_queue #{AwsPipes::VERSION} (c) 2013 Joe Nelson"
  banner <<-EOS
Read and write Amazon SQS through unix pipes.

You may provide Amazon authentication through these environment variables:
AWS_ACCESS_KEY_ID - AWS access key id
AWS_ACCESS_KEY    - AWS secret access key

Usage:
       aws_queue [options] write <queue-name>
       Send STDIN to an Amazon SQS queue, one message per line.

       aws_queue [options] read <queue-name>
       Print messages from Amazon SQS queue to STDOUT, one message per line.

where [options] are:
EOS

  opt :keyid, "AWS access key id", :type => :string
  opt :key, "AWS secret access key", :type => :string
end

## SETUP ###########################################################################

access_key_id     = ENV['AWS_ACCESS_KEY_ID'] || opts[:keyid] || Trollop::die("Missing access key id")
secret_access_key = ENV['AWS_ACCESS_KEY']    || opts[:key]   || Trollop::die("Missing secret access key")
sqs = AWS::SQS.new(
  :access_key_id     => access_key_id,
  :secret_access_key => secret_access_key
)

operation = ARGV.shift
unless %w(read write).include? operation
  Trollop::die "Unknown operation \"#{operation}\" -- expecting \"read\" or \"write\""
end

q_name = ARGV.shift
Trollop::die "Missing queue name" unless q_name

## OPERATION #######################################################################

begin
  q = sqs.queues.named q_name
  case operation
  when 'read'
    $stdout.sync = true
    q.poll do |msg|
      puts msg.body
    end
  when 'write'
    $stdin.sync = true
    while msg = gets
      q.send_message msg
    end
  end
rescue AWS::SQS::Errors::NonExistentQueue => e
  warn e
  exit 1
end
